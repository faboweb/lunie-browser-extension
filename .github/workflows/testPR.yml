name: PR testing

on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "ana/3958-move-tests-to-github-actions"

defaults:
  run:
    shell: bash

jobs:
  check_changelog:
    name: checkChangelog
    runs-on: ubuntu-latest
    container:
      image: circleci/node:10.15.3
    steps:
      - uses: actions/checkout@v1
      # What you should use
      - name: Add simsala
        run: yarn add simsala
      - name: Check if changlog was updated
        run: node node_modules/simsala/src/cli.js check --pending-path ./changes

  test_pr:
    name: testPR
    runs-on: ubuntu-latest
    steps:
      - name: 1 - Prep
        uses: actions/checkout@v1
      - name: Use Node.js
        uses: actions/setup-node@v1
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install
      - name: 2 - Lint
        continue-on-error: true
        run: yarn run lint
      - name: 3 - Unit tests
        continue-on-error: true
        run: |
            # notify Code Climate of a pending test report using `before-build`
            # ./cc-test-reporter before-build
            yarn run initiate-submodule
            yarn run test
            # upload test report to Code Climate
            # ./cc-test-reporter format-coverage -t lcov ./coverage/lcov.info
            # ./cc-test-reporter upload-coverage
        # no_output_timeout: 120
      - name: 4 - Audit
        run: |
          set +e

          SUMMARY="$(yarn audit | grep Severity)"
          VULNERABILITIES=".*(High|Critical).*"

          if [[ $SUMMARY =~ $VULNERABILITIES ]]; then
            echo "Unsafe dependencies found: $SUMMARY" >&2
            exit 1
          fi
          echo "Your dependencies are secure enough: $SUMMARY"
          exit 0

  # TODO
  # test_e2e:
  #   name: testE2E
  #   runs-on: ubuntu-latest
  #  #TODO
